@Library('ashishtech-shared-lib') _  // Import the shared library for common functions

pipeline {
    agent any

    environment {
        TOMCAT_URL = '172.31.38.104'
        TOMCAT_USER = 'ec2-user'
    }

    triggers {
        githubPush()  // Trigger the pipeline on GitHub push events
    }

    tools {
        maven 'maven-3.9.10'  // Specify the Maven version
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'ce4402e7-050c-46c0-b476-9b9e33e8db44', url: 'https://github.com/codebuddy123/student-webapp-sharedlib.git'
            }
        }

        stage('Set Build Metadata') {
            steps {
               script {
                  setBuildMetadata()  // Shared Library Function call inside script block
               }
               
               
            }
        }

        stage('Build the Package') {
            steps {
                script {
                    sendStartSlackNotification()  // Shared Library Function call inside script block
                }
                sh 'mvn clean package'  // Use Maven for building the package
            }
        }

        stage('Upload Artifact to Tomcat Server') {
            steps {
                sshagent(['tomcat-server']) {
                    sh "rm -f /opt/tomcat/webapps/student-reg-webapp.war"  // Remove existing WAR file if it exists
                    sh "scp -o StrictHostKeyChecking=no target/student-reg-webapp.war ${TOMCAT_USER}@${TOMCAT_URL}:/opt/tomcat/webapps/"
                }
            }
        }
    }

    post {
        success {
            script {
                sendSuccessEmail()  // Shared Library Function call inside script block
                sendSuccessSlackNotification()  // Shared Library Function call inside script block
            }
        }
        failure {
            script {
                sendFailureEmail()  // Shared Library Function call 
                sendFailureSlackNotification()  // Shared Library Function call 
                
            }
        }
        always {
            cleanWs()  // Clean up workspace after build
        }
    }
}